data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

pred ll2<n> == self = null & n = 0
	or self::node<next = r> * r::ll2<n-1>
	inv n >= 0.

pred ll3<n> == self::node<next = r> * r::ll2<n-1>
	inv n >= 1.

//(1)
checkentail x::node<_, null> * z::node<_,_> * y::ll<_> |- x::ll<m> & m = 2.
print residue.

//(2)
checkentail x::node<_, null> * z::node<_,_> * y::ll<_> & m = 1 |- x::ll<m>.
print residue.
